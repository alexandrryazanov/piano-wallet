import midi from "midi";
import * as readline from "node:readline";
import { generateMnemonic, wordlists } from "bip39";
import { shuffleArray } from "./utils/lists";
import { encrypt } from "./utils/crypt";
import { ethers } from "ethers";
import { generateNumbers } from "./utils/numbers";
import { writeWordsToFile } from "./utils/files";

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç Input –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MIDI-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
const input = new midi.Input();

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
const devicesCount = input.getPortCount();

// –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –ø–µ—Ä–≤–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
if (devicesCount < 1) {
  console.log("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö MIDI-—É—Å—Ç—Ä–æ–π—Å—Ç–≤.");
  process.exit();
}

input.openPort(0); // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É (0 ‚Äî —ç—Ç–æ –∏–Ω–¥–µ–∫—Å –ø–æ—Ä—Ç–∞)

console.log("–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞. –ù–∞—á–Ω–∏ –∏–≥—Ä–∞—Ç—å...");

const keys: number[] = [];

input.on("message", (deltaTime, message) => {
  const [command, note, velocity] = message;
  if (command !== 144 || velocity <= 0) return; // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ "Note On"
  if (keys.length === 0) {
    console.log("üéπ –°–∏–≥–Ω–∞–ª –ø–æ—Å—Ç—É–ø–∞–µ—Ç! –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –Ω–∞–∂–º–∏—Ç–µ Enter.");
  }
  keys.push(note);
});

// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–≤–æ–¥–∞ —Å –∫–æ–Ω—Å–æ–ª–∏
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ 'line', –∫–æ—Ç–æ—Ä–æ–µ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ —Å—Ç—Ä–æ–∫–∏
rl.on("line", async (input) => {
  if (input === "") {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ (–Ω–∞–∂–∞—Ç Enter)
    if (keys.length < 5) {
      console.log("–ú–µ–ª–æ–¥–∏—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞! =(");
      rl.close();
      process.exit(1);
    }

    await createWallet();
    rl.close();
    process.exit();
  }
});

async function createWallet() {
  const TOTAL_WORDS = 500;
  const melodyString = keys.join("-");
  const shuffledWords = shuffleArray(wordlists["EN"]).slice(0, TOTAL_WORDS - 1);
  const encryptedWords = shuffledWords.map((word) =>
    encrypt(word, melodyString),
  );
  const mnemonic = generateMnemonic(256); // 256 –±–∏—Ç ‚Äî —ç—Ç–æ 24 —Å–ª–æ–≤–∞
  const mnemonicWords = mnemonic.split(" ");
  const wallet = ethers.Wallet.fromPhrase(mnemonic);
  const positions = generateNumbers(
    melodyString,
    mnemonicWords.length,
    0,
    TOTAL_WORDS - 1,
  );
  mnemonicWords.forEach((word, i) => {
    encryptedWords[positions[i]] = encrypt(word, melodyString); // –®–∏—Ñ—Ä—É–µ–º –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –∏ –∫–ª–∞–¥–µ–º –≤–º–µ—Å—Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –Ω–∞ –ø–æ–∑–∏—Ü–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π
  });

  await writeWordsToFile(encryptedWords, wallet.address);

  console.log("–ö–æ—à–µ–ª–µ–∫ —Å–æ–∑–¥–∞–Ω. –ê–¥—Ä–µ—Å:", wallet.address);
}
